{"componentChunkName":"component---src-templates-blog-post-js","path":"/365037816/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"a4f1b389-bfea-55a8-aa05-8c3aed37bed8","html":"<h3 id=\"初始化\"><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>初始化</h3>\n<p>通过Vue.mixin混入beforeCreate方法执行初始化</p>\n<p>根组件：\n把this.<em>routerRoot定义为根实例\n子组件：\n通过Vue.util.defineReactive把</em>route作为响应式对象定义到Vue实例this下(指向this.<em>router.history.current)，\n并且把子组件的this.</em>routerRoot指向根实例</p>\n<p>通过Vue.component将router-view和router-link注册成全局组件</p>\n<p>通过Object.defineProperty往Vue.prototype上挂上了\n$router(指向this.<em>routerCurrent.</em>router)\n$router(指向this.<em>routerCurrent.</em>route 之前被定义为响应式了)\n所以每个Vue实例都可以拿到这俩个很重要的对象。</p>\n<h3 id=\"hash路由模式\"><a href=\"#hash%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>hash路由模式</h3>\n<p>回退： 监听浏览器的popstate或hashchange事件，重新执行transitionTo方法。\n改变： 调用window.history的pushState、replaceState api</p>\n<p>this.$router.push 本质上调用了内部history实例的push方法，计算出带hash值的新路径，执行transitionTo切换路由。</p>\n<h3 id=\"router-view：\"><a href=\"#router-view%EF%BC%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>router-view：</h3>\n<p>funcitional component\n在render函数的第二个参数可以解构出{props, children, parent, data}\n通过 const h = parent.$createElement 拿到父组件的Vue实例的创建VNode方法。</p>\n<p>初始化:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    data<span class=\"token punctuation\">.</span>routerView <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token comment\">// directly use parent context's createElement() function</span>\n    <span class=\"token comment\">// so that components rendered by router-view can resolve named slots</span>\n    <span class=\"token comment\">// 这个注释值得注意，因为调用了父组件的createElement 所以context是父组件实例，</span>\n    <span class=\"token comment\">// 之前在学习Vue源码的slot部分有注意到 命名slot只有在context正确的情况下才会渲染</span>\n    <span class=\"token keyword\">const</span> h <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>$createElement\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>name\n    <span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>$route\n    <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>_routerViewCache <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>_routerViewCache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>通过初始化时候定义的data.routerView = true网上寻找父组件的routerView\n从而确定routerView的层级，这个层级可以用来匹配router配置里的层级，方便找到应该渲染的组件!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// determine current view depth, also check to see if the tree</span>\n    <span class=\"token comment\">// has been toggled inactive but kept-alive.</span>\n    <span class=\"token keyword\">let</span> depth <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">let</span> inactive <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token punctuation\">.</span>_routerRoot <span class=\"token operator\">!==</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 父组件的data.routerView为true 说明是嵌套的router-view 将depth + 1</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token punctuation\">.</span>$vnode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>routerView<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        depth<span class=\"token operator\">++</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>_inactive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        inactive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n      parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>$parent\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 记录这个routerView的深度</span>\n    data<span class=\"token punctuation\">.</span>routerViewDepth <span class=\"token operator\">=</span> depth</code></pre></div>\n<p>通过depth 和route.matched这个records数组 找到对应的组件 并且cache下来</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">   <span class=\"token comment\">// render previous view if the tree is inactive and kept-alive</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inactive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> matched <span class=\"token operator\">=</span> route<span class=\"token punctuation\">.</span>matched<span class=\"token punctuation\">[</span>depth<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">// render empty node if no matched route</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>matched<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cache<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matched<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span></code></pre></div>\n<p>渲染组件。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span></code></pre></div>\n<p>另外来看 中间有一段给data上挂载registerRouteInstance方法\n这个方法会在初始化的时候指定beforeCreate调用 registerInstance(this, this) 也就是注册为当前实例\n并且destory调用 registerInstance(this) 也就是注册为空，销毁\n这个实例是给vue-router内部生成导航守卫时用的</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// attach instance registration hook</span>\n    <span class=\"token comment\">// this will be called in the instance's injected lifecycle hooks</span>\n    data<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">registerRouteInstance</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// val could be undefined for unregistration</span>\n      <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> matched<span class=\"token punctuation\">.</span>instances<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&amp;&amp;</span> current <span class=\"token operator\">!==</span> vm<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>val <span class=\"token operator\">&amp;&amp;</span> current <span class=\"token operator\">===</span> vm<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        matched<span class=\"token punctuation\">.</span>instances<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>写到这里 为什么路径切换了 router-view会重新render还是个悬念，接下来我们揭晓：\n在初始化的时候，_route被定义为响应式属性了。\nrouter-view的render刚开始的</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>$route</code></pre></div>\n<p>这段代码访问了$route, 收集到了依赖,\n在init中有一个监听, 对_route做了修改， 此时就会触发Watcher的重新渲染</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    history<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>route <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>apps<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        app<span class=\"token punctuation\">.</span>_route <span class=\"token operator\">=</span> route\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","timeToRead":3,"frontmatter":{"title":"vue-router源码学习","date":"September 28, 2018","spoiler":""},"fields":{"slug":"/365037816/","langKey":"en"}}},"pageContext":{"slug":"/365037816/","previous":null,"next":{"fields":{"slug":"/367088504/","langKey":"en","directoryName":"367088504"},"frontmatter":{"title":"react-component源码学习（1） rc-form"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}