{"componentChunkName":"component---src-templates-blog-post-js","path":"/479450340/","result":{"data":{"site":{"siteMetadata":{"title":"ssh的博客","author":"ssh"}},"markdownRemark":{"id":"ba64cebe-acc3-5e7b-a031-ff70b5f3802d","html":"<p><a href=\"https://medium.com/@martin_hotell/10-typescript-pro-tips-patterns-with-or-without-react-5799488d6680\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@martin_hotell/10-typescript-pro-tips-patterns-with-or-without-react-5799488d6680</a>\nReact +  TypeScript 10个需要避免的错误模式。</p>\n<p><a href=\"https://medium.com/scrum-ai/4-testing-koa-server-with-jest-week-5-8e980cd30527\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/scrum-ai/4-testing-koa-server-with-jest-week-5-8e980cd30527</a>\n单元测试TypeScript + Koa的实践</p>\n<p><a href=\"https://kentcdodds.com/blog/profile-a-react-app-for-performance\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kentcdodds.com/blog/profile-a-react-app-for-performance</a>\nReact使用DevTools分析性能的一些注意事项</p>\n<p><a href=\"https://kentcdodds.com/blog/optimize-react-re-renders\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kentcdodds.com/blog/optimize-react-re-renders</a>\nReact中优化组件重渲染，这里有几个隐含的知识点。</p>\n<ol>\n<li>React组件每次createElement，会生成一份新的props引用。</li>\n<li>\n<p>如果React在re-render中发现一个组件的type和props都保持了相同的引用，就会跳过这个组件的重渲染。\n这篇文章中提到的具体的优化策略是把</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>The count is <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Logger label<span class=\"token operator\">=</span><span class=\"token string\">\"counter\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>改成</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>The count is <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后把Logger组件的创建提到外层，而不要放在setCount会影响到的作用域下，这样logger组件就不会重新渲染了。</p>\n</li>\n</ol>\n<p><a href=\"https://kentcdodds.com/blog/the-state-reducer-pattern-with-react-hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kentcdodds.com/blog/the-state-reducer-pattern-with-react-hooks</a>\nReact Hooks的自定义hook中，如何利用reducer的模式提供更加灵活的数据管理，让用户拥有数据的控制权。</p>\n<p><a href=\"https://mariusschulz.com/blog/const-assertions-in-literal-expressions-in-typescript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mariusschulz.com/blog/const-assertions-in-literal-expressions-in-typescript</a>\nTypeScript中的const常量声明和let变量声明的类型区别，以及as const的应用。</p>\n<p><a href=\"https://github.com/piotrwitek/react-redux-typescript-guide#react---type-definitions-cheatsheet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/piotrwitek/react-redux-typescript-guide#react---type-definitions-cheatsheet</a>\nReact-Redux + TypeScript 的备忘录。</p>\n<p><a href=\"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/typescript-cheatsheets/react-typescript-cheatsheet</a>\nReact + TypeScript 进阶用法备忘录。</p>\n<p><a href=\"https://blog.echobind.com/integrating-prettier-eslint-airbnb-style-guide-in-vscode-47f07b5d7d6a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.echobind.com/integrating-prettier-eslint-airbnb-style-guide-in-vscode-47f07b5d7d6a</a>\n在项目中集成Prettier + ESLint + Airbnb Style Guide</p>\n<p><a href=\"https://levelup.gitconnected.com/setting-up-eslint-with-prettier-typescript-and-visual-studio-code-d113bbec9857\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://levelup.gitconnected.com/setting-up-eslint-with-prettier-typescript-and-visual-studio-code-d113bbec9857</a>\n在项目中集成ESLint with Prettier, TypeScript</p>\n<hr>\n<p><a href=\"https://kentcdodds.com/blog/when-to-break-up-a-component-into-multiple-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kentcdodds.com/blog/when-to-break-up-a-component-into-multiple-components</a>\n何时应该把代码拆分为组件。</p>\n<p><a href=\"https://blog.logrocket.com/rxjs-with-react-hooks-for-state-management/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.logrocket.com/rxjs-with-react-hooks-for-state-management/</a>\nrxjs + hooks实现一个简单的聊天系统。</p>\n<p><a href=\"https://kentcdodds.com/blog/understanding-reacts-key-prop\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kentcdodds.com/blog/understanding-reacts-key-prop</a>\n在React中巧用key来控制组件的重新创建。</p>\n<hr>\n<p><a href=\"https://vue-composition-api-rfc.netlify.com/#logic-extraction-and-reuse\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://vue-composition-api-rfc.netlify.com/#logic-extraction-and-reuse</a>\nvue composition api 这部分主要讲述了Code Organization的改变，based on option type -> based on logical concern</p>\n<hr>\n<p><a href=\"https://vue-composition-api-rfc.netlify.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://vue-composition-api-rfc.netlify.com</a>\nvue composition api 阅读完成。</p>\n<hr>\n<p><a href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-s-the-difference-between-class-prototypal-inheritance-e4cd0a7562e9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/javascript-scene/master-the-javascript-interview-what-s-the-difference-between-class-prototypal-inheritance-e4cd0a7562e9</a>\n描述了组合比继承更好的地方。</p>\n<blockquote>\n<p>“…the problem with object-oriented languages is they’ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.” ~ Joe Armstrong — “Coders at Work”</p>\n</blockquote>\n<blockquote>\n<p>面向对象语言的问题在于它们带来了所有这些隐含的环境。\n你想要一个香蕉，但你得到的是拿着香蕉和整个丛林的大猩猩。</p>\n</blockquote>\n<hr>\n<p><a href=\"https://nextjs.org/learn/basics/getting-started\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://nextjs.org/learn/basics/getting-started</a>\nnextjs官方文档的学习任务全部做完，包括基础和进阶。</p>\n<hr>\n<p><a href=\"https://medium.com/swlh/clean-up-redux-code-with-react-redux-hooks-71587cfcf87a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/swlh/clean-up-redux-code-with-react-redux-hooks-71587cfcf87a</a>\nreact-redux提供的hook让我们摆脱了connect高阶组件和很多样板代码，nice~</p>\n<hr>\n<p><a href=\"https://kentcdodds.com/blog/fix-the-slow-render-before-you-fix-the-re-render\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kentcdodds.com/blog/fix-the-slow-render-before-you-fix-the-re-render</a>\n在解决重渲染之前，先解决过慢的渲染。</p>\n<hr>\n<p><a href=\"https://kentcdodds.com/blog/state-colocation-will-make-your-react-app-faster/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kentcdodds.com/blog/state-colocation-will-make-your-react-app-faster/</a>\n仔细思考你的React应用中，状态应该放在什么位置，是组件自身，提升到父组件，亦或是局部context和redux，这会有益于提升应用的性能和可维护性。</p>\n<hr>\n<p><a href=\"https://kentcdodds.com/blog/dont-sync-state-derive-it\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kentcdodds.com/blog/dont-sync-state-derive-it</a>\n仔细思考React组件中的状态应该如何管理，优先使用派生状态，并且在适当的时候利用useMemo、reselect等库去优化他们。</p>\n<hr>\n<p><a href=\"https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass</a>\n在webpack构建的项目中实现css和js共享sass变量。</p>\n<hr>\n<p><a href=\"https://github.com/vuejs/rfcs/issues/89\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/vuejs/rfcs/issues/89</a>\n132提出了vue3中为何取消time slice的疑问，\n尤雨溪从react和vue在原理层面的差异出发解释了这个问题。</p>\n<hr>\n<p><a href=\"https://stackoverflow.com/questions/28818849/how-do-the-different-enum-variants-work-in-typescript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/28818849/how-do-the-different-enum-variants-work-in-typescript</a>\nts官方团队的<a href=\"https://stackoverflow.com/users/1704166/ryan-cavanaugh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ryan Cavanaugh</a>回答关于ts中enum 和 declare enum的一些区别。</p>\n<blockquote>\n<p>Remember the golden rule: Never declare things that don’t actually exist\n不要用declare去声明运行时不存在的东西。</p>\n</blockquote>\n<hr>\n<p><a href=\"https://artsy.github.io/blog/2018/11/21/conditional-types-in-typescript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://artsy.github.io/blog/2018/11/21/conditional-types-in-typescript/</a>\nts 泛型继承的分配 还需要进一步理解</p>","timeToRead":5,"frontmatter":{"title":"英文技术文章阅读。","date":"August 12, 2019","spoiler":""},"fields":{"slug":"/479450340/","langKey":"en"}}},"pageContext":{"slug":"/479450340/","previous":{"fields":{"slug":"/474922327/","langKey":"en","directoryName":"474922327"},"frontmatter":{"title":"用jsx封装Vue中的复杂组件（网易云音乐实战项目需求）"}},"next":{"fields":{"slug":"/487358969/","langKey":"en","directoryName":"487358969"},"frontmatter":{"title":"使用React Hooks + 自定义Hook封装一步一步打造一个完善的小型应用。"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}